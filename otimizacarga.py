import streamlit as st
import pandas as pd
from geneticalgorithm import geneticalgorithm as ga

# Configura√ß√£o inicial da p√°gina
st.set_page_config(page_title="Otimiza√ß√£o de Transporte de Carga", layout="wide")
st.title("üöö Otimiza√ß√£o de Transporte de Carga")

# Fun√ß√£o para carregar os dados do arquivo CSV
def load_data(file):
    return pd.read_csv(file, sep=";")

# Fun√ß√£o de avalia√ß√£o (fitness) do algoritmo gen√©tico
def fitness_function(X, data, max_volume, max_weight):
    selected_items = data.iloc[X.astype(bool), :]
    total_weight = selected_items['PESO'].sum()
    total_volume = selected_items['VOLUME'].sum()
    # Penalizar combina√ß√µes que excedem o peso ou volume m√°ximo
    if total_weight > max_weight or total_volume > max_volume:
        return -1
    else:
        return -selected_items['VALOR'].sum()  # Minimizar valor negativo para maximizar o valor

# Vari√°vel para armazenar os dados do CSV
data = None

# Adicionando o Menu Expans√≠vel com Explica√ß√£o
with st.expander("‚ÑπÔ∏è Como funciona este relat√≥rio?", expanded=False):
    st.markdown(
        """
        Este aplicativo realiza uma **Otimiza√ß√£o de Transporte de Carga** usando um **algoritmo gen√©tico**.
        
        ### Objetivo:
        O objetivo √© selecionar itens para transporte de forma que o **valor total** dos itens seja maximizado, 
        enquanto respeita os limites de **peso** e **volume** do ve√≠culo.
        
        ### Como funciona:
        - **Carregamento dos Dados**: O usu√°rio carrega um arquivo CSV com informa√ß√µes de peso, volume e valor dos itens.
        - **Configura√ß√£o do Algoritmo**: √â poss√≠vel ajustar o peso e volume m√°ximos, al√©m de par√¢metros do algoritmo gen√©tico.
        - **Execu√ß√£o do Algoritmo**: O algoritmo gen√©tico seleciona itens que maximizam o valor sem exceder as restri√ß√µes.
        
        ### Par√¢metros do Algoritmo:
        - **Tamanho da Popula√ß√£o**: Define quantas solu√ß√µes s√£o geradas em cada itera√ß√£o.
        - **Probabilidade de Muta√ß√£o**: Define a taxa de muta√ß√£o, influenciando a diversidade das solu√ß√µes.
        - **N√∫mero de Itera√ß√µes**: Define o n√∫mero m√°ximo de itera√ß√µes para encontrar uma solu√ß√£o √≥tima.
        
        Ap√≥s a execu√ß√£o, o relat√≥rio exibe os **itens selecionados** e **m√©tricas** como peso, volume e valor final.
        """
    )

# Layout da interface em colunas com fundo diferenciado e bordas
col1, col2 = st.columns(2)

# Estilo customizado para se√ß√µes
section_style = """
    <style>
    .st-expander {
        background-color: #f0f2f6;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        margin-top: 10px;
    }
    .st-title {
        color: #4CAF50;
    }
    </style>
"""

# Inserir o estilo customizado na p√°gina
st.markdown(section_style, unsafe_allow_html=True)

# Expansor para carregar e visualizar dados
with col1.expander("üìÇ Carregar Dados"):
    uploaded_file = st.file_uploader("Selecione o arquivo CSV", type='csv')
    if uploaded_file is not None:
        data = load_data(uploaded_file)
        st.write("‚úÖ Arquivo carregado com sucesso!")
        # Exibir informa√ß√µes do arquivo carregado
        calculated_button = st.button("üìä Mostrar Estat√≠sticas")
        if calculated_button:
            st.write(data)
            st.write(f"**Quantidade de Itens:** {len(data)}")
            st.write(f"**Peso Total:** {data['PESO'].sum()} kg")
            st.write(f"**Volume Total:** {data['VOLUME'].sum()} m¬≥")
            st.write(f"**Valor Total:** R$ {data['VALOR'].sum():,.2f}")

# Expansor para configurar e rodar o algoritmo gen√©tico
with col2.expander("‚öôÔ∏è Configura√ß√µes e Execu√ß√£o"):
    if data is not None:
        st.write("### Par√¢metros de Restri√ß√£o:")
        sobra_peso = st.number_input("Sobra de Peso (kg)", min_value=0, value=6000)
        sobra_volume = st.number_input("Sobra de Volume (m¬≥)", min_value=0, value=350)
        iteracao = st.number_input("Quantidade de Itera√ß√µes", min_value=1, value=10)
        
        st.write("### Configura√ß√µes do Algoritmo Gen√©tico:")
        population_size = st.slider("Tamanho da Popula√ß√£o", min_value=5, max_value=50, value=10)
        mutation_prob = st.slider("Probabilidade de Muta√ß√£o", min_value=0.0, max_value=1.0, value=0.1)
        
        process_button = st.button("üöÄ Executar Otimiza√ß√£o")
        if process_button:
            # Par√¢metros do algoritmo
            algorithm_param = {
                'max_num_iteration': iteracao,
                'population_size': population_size,
                'mutation_probability': mutation_prob,
                'elit_ratio': 0.01,
                'crossover_probability': 0.5,
                'parents_portion': 0.3,
                'crossover_type': 'uniform',
                'max_iteration_without_improv': None
            }
            
            varbound = [[0, 1]] * len(data)  # Limites das vari√°veis para o algoritmo gen√©tico
            # Instanciando e executando o modelo
            model = ga(
                function=lambda X: fitness_function(X, data, sobra_volume, sobra_peso),
                dimension=len(data),
                variable_type='bool',
                variable_boundaries=varbound,
                algorithm_parameters=algorithm_param
            )
            with st.spinner("üîÑ Processando..."):
                model.run()
            # Resultados e m√©tricas da solu√ß√£o final
            solution = data.iloc[model.output_dict['variable'].astype(bool), :]
            st.write("### üìã Itens Selecionados:")
            st.write(solution)
            st.write(f"**Quantidade Final de Itens:** {len(solution)}")
            st.write(f"**Peso Final:** {solution['PESO'].sum()} kg")
            st.write(f"**Volume Final:** {solution['VOLUME'].sum()} m¬≥")
            st.write(f"**Valor Total:** R$ {solution['VALOR'].sum():,.2f}")

# --- Rodap√© Customizado ---
st.write("---")
st.markdown(
    """
    <div style='text-align: center; margin-top: 20px; line-height: 1.2;'>
        <p style='font-size: 16px; font-weight: bold; margin: 0;'>Projeto: Otimiza√ß√£o de Transporte de Carga</p>
        <p style='font-size: 14px; margin: 5px 0;'>Desenvolvido por:</p>
        <p style='font-size: 20px; color: #4CAF50; font-weight: bold; margin: 0;'>Cl√°udio Ferreira Neves</p>
        <p style='font-size: 16px; color: #555; margin: 0;'>Especialista em An√°lise de Dados, RPA e AI</p>
        <p style='font-size: 14px; margin: 10px 0 5px 0;'>Ferramentas utilizadas: Python, Streamlit, Pandas, Geneticalgorithm</p>
        <p style='font-size: 12px; color: #777; margin: 0;'>¬© 2024</p>
    </div>
    """,
    unsafe_allow_html=True
)
